{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StarsDisplay","props","utils","range","stars","map","starId","key","className","PlayNumber","style","background","colors","status","onClick","number","PlayAgain","color","gameStatus","Game","useState","random","setStars","candidateNumbers","setCandidateNumbers","availableNumbers","setAvailableNumbers","secondsLeft","setSecondsLeft","useEffect","length","timer","setTimeout","clearTimeout","setGameState","newCandidateNumbers","sum","newAvailableNumbers","filter","x","includes","randomSumIn","useGameState","candidateWrong","numberStatus","onNumberClick","currentStatus","concat","startNewGame","App","StarMatch","gameId","setGameId","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.54cc7e49.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\n\r\n\r\nconst StarsDisplay = props => (\r\n    <>\r\n        {utils.range(1, props.stars).map(starId => <div key={starId} className=\"star\"/>)}\r\n    </>\r\n);\r\n\r\n\r\nconst PlayNumber = props => (\r\n    <button className=\"number\"\r\n            style={{background: colors[props.status]}}\r\n            onClick={() => props.onClick(props.number, props.status)}\r\n    >\r\n        {props.number}\r\n    </button>\r\n);\r\n\r\n\r\nconst PlayAgain = props => (\r\n    <div className=\"game-done\">\r\n        <div className=\"message\"\r\n             style={{color: props.gameStatus === \"won\" ? \"green\" : \"red \"}}\r\n        >\r\n            {props.gameStatus === \"won\" ? \"You Won! ^_^\" : \"you lost T_T\"}\r\n        </div>\r\n        <button onClick={props.onClick}>Play Again</button>\r\n    </div>\r\n)\r\n\r\n\r\n// creating a hook for the game\r\nconst useGameState = () => {\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [candidateNumbers, setCandidateNumbers] = useState([]);\r\n    const [availableNumbers, setAvailableNumbers] = useState(utils.range(1, 9));\r\n    const [secondsLeft, setSecondsLeft] = useState(15);\r\n\r\n    useEffect(() => {\r\n        if (secondsLeft > 0 && availableNumbers.length > 0) {\r\n            const timer = setTimeout(() => {\r\n                setSecondsLeft(secondsLeft - 1);\r\n            }, 1000);\r\n\r\n            return () => clearTimeout(timer);\r\n        }\r\n    })\r\n\r\n    const setGameState = (newCandidateNumbers) => {\r\n        if (utils.sum(newCandidateNumbers) !== stars) {\r\n            setCandidateNumbers(newCandidateNumbers);\r\n        } else {\r\n            const newAvailableNumbers = availableNumbers.filter(\r\n                x => !newCandidateNumbers.includes(x)\r\n            );\r\n            setAvailableNumbers(newAvailableNumbers);\r\n            setCandidateNumbers([]);\r\n            setStars(utils.randomSumIn(newAvailableNumbers, 9));\r\n        }\r\n\r\n    };\r\n\r\n    return {stars, availableNumbers, candidateNumbers, secondsLeft, setGameState};\r\n\r\n};\r\n\r\nconst Game = (props) => {\r\n    // using the hook\r\n    const {stars, availableNumbers, candidateNumbers, secondsLeft, setGameState} = useGameState();\r\n\r\n    const candidateWrong = utils.sum(candidateNumbers) > stars;\r\n    const gameStatus = availableNumbers.length === 0 ? \"won\" : secondsLeft === 0 ? \"lost\" : \"playing\"\r\n\r\n    // const resetGame = () => {\r\n    //     setStars(utils.random(1, 9));\r\n    //     setAvailableNumbers(utils.range(1, 9));\r\n    //     setCandidateNumbers([]);\r\n    //     setSecondsLeft(15)\r\n    // }\r\n\r\n    const numberStatus = (number) => {\r\n        if (!availableNumbers.includes(number)) {\r\n            return 'used';\r\n        }\r\n        if (candidateNumbers.includes(number)) {\r\n            return candidateWrong ? 'wrong' : 'candidate'\r\n        }\r\n        return 'available'\r\n    };\r\n\r\n\r\n    const onNumberClick = (number, currentStatus) => {\r\n        if (currentStatus === \"used\" || gameStatus !== \"playing\")\r\n            return;\r\n\r\n        let newCandidateNumbers;\r\n        if (currentStatus === \"available\") {\r\n            newCandidateNumbers = candidateNumbers.concat(number);\r\n        } else {\r\n            newCandidateNumbers = candidateNumbers.filter(x => x !== number);\r\n        }\r\n\r\n        // setting the state from the custom hook\r\n        setGameState(newCandidateNumbers);\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n            </div>\r\n            <div className=\"body\">\r\n                <div className=\"left\">\r\n                    {\r\n                        gameStatus !== \"playing\" ? <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus}/> :\r\n                            <StarsDisplay stars={stars}/>\r\n                    }\r\n                </div>\r\n                <div className=\"right\">\r\n                    {utils.range(1, 9).map(number =>\r\n                        <PlayNumber\r\n                            key={number}\r\n                            number={number}\r\n                            status={numberStatus(number)}\r\n                            onClick={onNumberClick}\r\n                        />\r\n                    )}\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <StarMatch/>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\nconst StarMatch = () => {\r\n    const [gameId, setGameId] = useState(1);\r\n\r\n    return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)}/>\r\n}\r\n// copied from the  starting code\r\n// Color Theme\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n};\r\n\r\n\r\nconst utils = {\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n    range: (min, max) => Array.from({length: max - min + 1}, (_, i) => min + i),\r\n\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n    randomSumIn: (arr, max) => {\r\n        const sets = [[]];\r\n        const sums = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0, len = sets.length; j < len; j++) {\r\n                const candidateSet = sets[j].concat(arr[i]);\r\n                const candidateSum = utils.sum(candidateSet);\r\n                if (candidateSum <= max) {\r\n                    sets.push(candidateSet);\r\n                    sums.push(candidateSum);\r\n                }\r\n            }\r\n        }\r\n        return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n};\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}